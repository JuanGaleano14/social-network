<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/posts-service/src/likes/likes.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/likes/likes.service.ts" />
              <option name="originalContent" value="import { Injectable, ConflictException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Like } from './like.entity';&#10;import { Repository } from 'typeorm';&#10;import { NotFoundException } from '@nestjs/common';&#10;&#10;@Injectable()&#10;export class LikesService {&#10;  constructor(&#10;    @InjectRepository(Like)&#10;    private likesRepository: Repository&lt;Like&gt;,&#10;  ) {}&#10;&#10;  async like(post_id: string, usuario_id: string): Promise&lt;Like&gt; {&#10;    const already = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (already) {&#10;      throw new ConflictException('Ya le diste like a esta publicación');&#10;    }&#10;&#10;    const like = this.likesRepository.create({ post_id, usuario_id });&#10;    return this.likesRepository.save(like);&#10;  }&#10;&#10;  async countByPost(post_id: string): Promise&lt;number&gt; {&#10;    return this.likesRepository.count({ where: { post_id } });&#10;  }&#10;&#10;  async removeLike(post_id: string, usuario_id: string): Promise&lt;void&gt; {&#10;    const like = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (!like) {&#10;      // Puedes lanzar una excepción o simplemente no hacer nada&#10;      throw new NotFoundException('Like no encontrado');&#10;    }&#10;&#10;    await this.likesRepository.remove(like);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable, ConflictException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Like } from './like.entity';&#10;import { Repository } from 'typeorm';&#10;import { NotFoundException } from '@nestjs/common';&#10;&#10;@Injectable()&#10;export class LikesService {&#10;  constructor(&#10;    @InjectRepository(Like)&#10;    private likesRepository: Repository&lt;Like&gt;,&#10;  ) {}&#10;&#10;  async like(post_id: string, usuario_id: string): Promise&lt;Like&gt; {&#10;    const already = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (already) {&#10;      throw new ConflictException('Ya le diste like a esta publicación');&#10;    }&#10;&#10;    const like = this.likesRepository.create({ post_id, usuario_id });&#10;    return this.likesRepository.save(like);&#10;  }&#10;&#10;  async countByPost(post_id: string): Promise&lt;number&gt; {&#10;    return this.likesRepository.count({ where: { post_id } });&#10;  }&#10;&#10;  async removeLike(post_id: string, usuario_id: string): Promise&lt;void&gt; {&#10;    const like = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (!like) {&#10;      // Puedes lanzar una excepción o simplemente no hacer nada&#10;      throw new NotFoundException('Like no encontrado');&#10;    }&#10;&#10;    await this.likesRepository.remove(like);&#10;  }&#10;&#10;  async findByPost(post_id: string): Promise&lt;Like[]&gt; {&#10;    return this.likesRepository.find({ where: { post_id } });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/posts/posts.controller.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/posts/posts.controller.spec.ts" />
              <option name="originalContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { PostsController } from './posts.controller';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;&#10;describe('PostsController', () =&gt; {&#10;  let controller: PostsController;&#10;  let postsService: any;&#10;  let likesService: any;&#10;&#10;  beforeEach(async () =&gt; {&#10;    postsService = {&#10;      create: jest.fn(),&#10;      findAll: jest.fn(),&#10;    };&#10;    likesService = {&#10;      like: jest.fn(),&#10;      removeLike: jest.fn(),&#10;    };&#10;    const module: TestingModule = await Test.createTestingModule({&#10;      controllers: [PostsController],&#10;      providers: [&#10;        { provide: PostsService, useValue: postsService },&#10;        { provide: LikesService, useValue: likesService },&#10;      ],&#10;    }).compile();&#10;    controller = module.get&lt;PostsController&gt;(PostsController);&#10;  });&#10;&#10;  it('should be defined', () =&gt; {&#10;    expect(controller).toBeDefined();&#10;  });&#10;&#10;  describe('create', () =&gt; {&#10;    it('debería crear un post', async () =&gt; {&#10;      const dto: CreatePostDto = { mensaje: 'Hola' };&#10;      const req = { user: { userId: 'user1' } };&#10;      postsService.create.mockResolvedValue({&#10;        id: 1,&#10;        ...dto,&#10;        usuario_id: 'user1',&#10;      });&#10;      const result = await controller.create(dto, req);&#10;      expect(result).toEqual({ id: 1, ...dto, usuario_id: 'user1' });&#10;      expect(postsService.create).toHaveBeenCalledWith(dto, 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getAll', () =&gt; {&#10;    it('debería retornar todos los posts', async () =&gt; {&#10;      const posts = [{ id: 1 }, { id: 2 }];&#10;      postsService.findAll.mockResolvedValue(posts);&#10;      const result = await controller.getAll();&#10;      expect(result).toBe(posts);&#10;    });&#10;  });&#10;&#10;  describe('like', () =&gt; {&#10;    it('debería dar like a un post', async () =&gt; {&#10;      likesService.like.mockResolvedValue({&#10;        id: 1,&#10;        post_id: '1',&#10;        usuario_id: 'user1',&#10;      });&#10;      const req = { user: { userId: 'user1' } };&#10;      const result = await controller.like('1', req);&#10;      expect(result).toEqual({ id: 1, post_id: '1', usuario_id: 'user1' });&#10;      expect(likesService.like).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('removeLike', () =&gt; {&#10;    it('debería quitar el like de un post', async () =&gt; {&#10;      likesService.removeLike.mockResolvedValue(undefined);&#10;      const req = { user: { userId: 'user1' } };&#10;      await controller.removeLike('1', req);&#10;      expect(likesService.removeLike).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { PostsController } from './posts.controller';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;&#10;describe('PostsController', () =&gt; {&#10;  let controller: PostsController;&#10;  let postsService: any;&#10;  let likesService: any;&#10;&#10;  beforeEach(async () =&gt; {&#10;    postsService = {&#10;      create: jest.fn(),&#10;      findAll: jest.fn(),&#10;    };&#10;    likesService = {&#10;      like: jest.fn(),&#10;      removeLike: jest.fn(),&#10;    };&#10;    const module: TestingModule = await Test.createTestingModule({&#10;      controllers: [PostsController],&#10;      providers: [&#10;        { provide: PostsService, useValue: postsService },&#10;        { provide: LikesService, useValue: likesService },&#10;      ],&#10;    }).compile();&#10;    controller = module.get&lt;PostsController&gt;(PostsController);&#10;  });&#10;&#10;  it('should be defined', () =&gt; {&#10;    expect(controller).toBeDefined();&#10;  });&#10;&#10;  describe('create', () =&gt; {&#10;    it('debería crear un post', async () =&gt; {&#10;      const dto: CreatePostDto = { mensaje: 'Hola' };&#10;      const req = { user: { userId: 'user1' } };&#10;      postsService.create.mockResolvedValue({&#10;        id: 1,&#10;        ...dto,&#10;        usuario_id: 'user1',&#10;      });&#10;      const result = await controller.create(dto, req);&#10;      expect(result).toEqual({ id: 1, ...dto, usuario_id: 'user1' });&#10;      expect(postsService.create).toHaveBeenCalledWith(dto, 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getAll', () =&gt; {&#10;    it('debería retornar todos los posts', async () =&gt; {&#10;      const posts = [{ id: 1 }, { id: 2 }];&#10;      postsService.findAll.mockResolvedValue(posts);&#10;      const result = await controller.getAll();&#10;      expect(result).toBe(posts);&#10;    });&#10;  });&#10;&#10;  describe('like', () =&gt; {&#10;    it('debería dar like a un post', async () =&gt; {&#10;      likesService.like.mockResolvedValue({&#10;        id: 1,&#10;        post_id: '1',&#10;        usuario_id: 'user1',&#10;      });&#10;      const req = { user: { userId: 'user1' } };&#10;      const result = await controller.like('1', req);&#10;      expect(result).toEqual({ id: 1, post_id: '1', usuario_id: 'user1' });&#10;      expect(likesService.like).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('removeLike', () =&gt; {&#10;    it('debería quitar el like de un post', async () =&gt; {&#10;      likesService.removeLike.mockResolvedValue(undefined);&#10;      const req = { user: { userId: 'user1' } };&#10;      await controller.removeLike('1', req);&#10;      expect(likesService.removeLike).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getLikesByPost', () =&gt; {&#10;    it('debería retornar los likes de un post', async () =&gt; {&#10;      const likes = [&#10;        { id: 1, post_id: '1', usuario_id: 'user1' },&#10;        { id: 2, post_id: '1', usuario_id: 'user2' },&#10;      ];&#10;      likesService.findByPost = jest.fn().mockResolvedValue(likes);&#10;      const result = await controller.getLikesByPost('1');&#10;      expect(result).toBe(likes);&#10;      expect(likesService.findByPost).toHaveBeenCalledWith('1');&#10;    });&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/posts/posts.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/posts/posts.controller.ts" />
              <option name="originalContent" value="import {&#10;  Controller,&#10;  Get,&#10;  Post as HttpPost,&#10;  Body,&#10;  UseGuards,&#10;  Request,&#10;  Param,&#10;  Delete,&#10;} from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;import {&#10;  ApiTags,&#10;  ApiBearerAuth,&#10;  ApiOperation,&#10;  ApiResponse,&#10;  ApiParam,&#10;} from '@nestjs/swagger';&#10;&#10;@ApiTags('Posts')&#10;@ApiBearerAuth()&#10;@Controller('posts')&#10;export class PostsController {&#10;  constructor(&#10;    private postsService: PostsService,&#10;    private likesService: LikesService,&#10;  ) {}&#10;&#10;  @ApiOperation({ summary: 'Crear un nuevo post' })&#10;  @ApiResponse({ status: 201, description: 'Post creado exitosamente.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost()&#10;  create(@Body() dto: CreatePostDto, @Request() req) {&#10;    return this.postsService.create(dto, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Obtener todos los posts' })&#10;  @ApiResponse({ status: 200, description: 'Lista de posts.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get()&#10;  async getAll() {&#10;    return this.postsService.findAll();&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Dar like a un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 201, description: 'Like agregado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost(':id/like')&#10;  like(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.like(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Quitar like de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Like eliminado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Delete(':id/like')&#10;  removeLike(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.removeLike(id, req.user.userId);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import {&#10;  Controller,&#10;  Get,&#10;  Post as HttpPost,&#10;  Body,&#10;  UseGuards,&#10;  Request,&#10;  Param,&#10;  Delete,&#10;} from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;import {&#10;  ApiTags,&#10;  ApiBearerAuth,&#10;  ApiOperation,&#10;  ApiResponse,&#10;  ApiParam,&#10;} from '@nestjs/swagger';&#10;&#10;@ApiTags('Posts')&#10;@ApiBearerAuth()&#10;@Controller('posts')&#10;export class PostsController {&#10;  constructor(&#10;    private postsService: PostsService,&#10;    private likesService: LikesService,&#10;  ) {}&#10;&#10;  @ApiOperation({ summary: 'Crear un nuevo post' })&#10;  @ApiResponse({ status: 201, description: 'Post creado exitosamente.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost()&#10;  create(@Body() dto: CreatePostDto, @Request() req) {&#10;    return this.postsService.create(dto, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Obtener todos los posts' })&#10;  @ApiResponse({ status: 200, description: 'Lista de posts.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get()&#10;  async getAll() {&#10;    return this.postsService.findAll();&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Dar like a un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 201, description: 'Like agregado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost(':id/like')&#10;  like(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.like(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Quitar like de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Like eliminado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Delete(':id/like')&#10;  removeLike(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.removeLike(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Listar likes de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Lista de likes del post.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get(':id/likes')&#10;  async getLikesByPost(@Param('id') id: string) {&#10;    return this.likesService.findByPost(id);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>