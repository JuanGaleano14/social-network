<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/auth-service/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main.ts" />
              <option name="originalContent" value="import { ValidationPipe } from '@nestjs/common';&#10;import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { GlobalExceptionFilter } from './global-exception.filter';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;  app.useGlobalPipes(new ValidationPipe());&#10;  app.useGlobalFilters(new GlobalExceptionFilter());&#10;&#10;  // Configuración de Swagger&#10;  const { SwaggerModule, DocumentBuilder } = await import('@nestjs/swagger');&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Auth Service API')&#10;    .setDescription('Documentación de la API de autenticación')&#10;    .setVersion('1.0')&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(3000);&#10;}&#10;&#10;bootstrap();&#10;" />
              <option name="updatedContent" value="import { ValidationPipe } from '@nestjs/common';&#10;import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { GlobalExceptionFilter } from './global-exception.filter';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;  app.useGlobalPipes(new ValidationPipe());&#10;  app.useGlobalFilters(new GlobalExceptionFilter());&#10;  app.enableCors(); // Habilitar CORS&#10;&#10;  // Configuración de Swagger&#10;  const { SwaggerModule, DocumentBuilder } = await import('@nestjs/swagger');&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Auth Service API')&#10;    .setDescription('Documentación de la API de autenticación')&#10;    .setVersion('1.0')&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(3000);&#10;}&#10;&#10;bootstrap();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: &quot;3.9&quot;&#10;&#10;services:&#10;    postgres:&#10;        image: postgres:15&#10;        container_name: postgres&#10;        environment:&#10;            POSTGRES_USER: postgres&#10;            POSTGRES_PASSWORD: postgres&#10;            POSTGRES_DB: authdb&#10;        ports:&#10;            - &quot;5432:5432&quot;&#10;        volumes:&#10;            - pgdata:/var/lib/postgresql/data&#10;&#10;    auth-service:&#10;        build:&#10;            context: ./auth-service&#10;        container_name: auth-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;            JWT_EXPIRES_IN: 1d&#10;        ports:&#10;            - &quot;3001:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;    users-service:&#10;        build:&#10;            context: ./users-service&#10;        container_name: users-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;        ports:&#10;            - &quot;3002:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;    posts-service:&#10;        build:&#10;            context: ./posts-service&#10;        container_name: posts-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;        ports:&#10;            - &quot;3003:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;volumes:&#10;    pgdata:&#10;" />
              <option name="updatedContent" value="version: &quot;3.9&quot;&#10;&#10;services:&#10;    postgres:&#10;        image: postgres:15&#10;        container_name: postgres&#10;        environment:&#10;            POSTGRES_USER: postgres&#10;            POSTGRES_PASSWORD: postgres&#10;            POSTGRES_DB: authdb&#10;        ports:&#10;            - &quot;5432:5432&quot;&#10;        volumes:&#10;            - pgdata:/var/lib/postgresql/data&#10;&#10;    auth-service:&#10;        build:&#10;            context: ./auth-service&#10;        container_name: auth-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;            JWT_EXPIRES_IN: 1d&#10;        ports:&#10;            - &quot;3001:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;    users-service:&#10;        build:&#10;            context: ./users-service&#10;        container_name: users-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;        ports:&#10;            - &quot;3002:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;    posts-service:&#10;        build:&#10;            context: ./posts-service&#10;        container_name: posts-service&#10;        environment:&#10;            DATABASE_URL: postgres://postgres:postgres@postgres:5433/authdb&#10;            JWT_SECRET: e7acff5d1c1340e28a3c9fcf9b1f6e56a2c5d8fa3f2e3ba3e8b2323c78a9ed3a&#10;        ports:&#10;            - &quot;3003:3000&quot;&#10;        depends_on:&#10;            - postgres&#10;&#10;    frontend:&#10;        build:&#10;            context: ./frontend&#10;        container_name: frontend&#10;        ports:&#10;            - &quot;4173:4173&quot;&#10;        depends_on:&#10;            - auth-service&#10;            - users-service&#10;            - posts-service&#10;&#10;volumes:&#10;    pgdata:" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/Dockerfile" />
              <option name="originalContent" value="FROM node:20-alpine&#10;&#10;WORKDIR /app&#10;&#10;COPY package*.json ./&#10;RUN npm install&#10;&#10;COPY . .&#10;&#10;RUN npm run build&#10;&#10;EXPOSE 5173&#10;&#10;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;preview&quot;]&#10;" />
              <option name="updatedContent" value="FROM node:20-alpine&#10;&#10;WORKDIR /app&#10;&#10;COPY package*.json ./&#10;RUN npm install&#10;&#10;COPY . .&#10;&#10;RUN npm run build&#10;&#10;EXPOSE 4173&#10;&#10;CMD [&quot;npm&quot;, &quot;run&quot;, &quot;preview&quot;, &quot;--&quot;, &quot;--host&quot;, &quot;--port&quot;, &quot;4173&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/api/apis.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/api/apis.ts" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="import axios, { type AxiosRequestConfig } from 'axios';&#10;import { useAuthStore } from '../context/useAuthStore';&#10;&#10;const authApi = axios.create({&#10;  baseURL: 'http://localhost:3001',&#10;});&#10;&#10;const usersApi = axios.create({&#10;  baseURL: 'http://localhost:3002',&#10;});&#10;&#10;const postsApi = axios.create({&#10;  baseURL: 'http://localhost:3003',&#10;});&#10;&#10;const attachToken = (config: AxiosRequestConfig) =&gt; {&#10;  const token = useAuthStore.getState().token;&#10;  if (token) config.headers = { ...config.headers, Authorization: `Bearer ${token}` };&#10;  return config;&#10;};&#10;&#10;authApi.interceptors.request.use(attachToken);&#10;usersApi.interceptors.request.use(attachToken);&#10;postsApi.interceptors.request.use(attachToken);&#10;&#10;export { authApi, usersApi, postsApi };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/LoginForm/LoginForm.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/LoginForm/LoginForm.module.css" />
              <option name="originalContent" value=".form {&#10;    width: 300px;&#10;    margin: 80px auto;&#10;    padding: 2rem;&#10;    border: 1px solid #ccc;&#10;    border-radius: 10px;&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 1rem;&#10;    background: #f9f9f9;&#10;}&#10;&#10;.form input {&#10;    padding: 0.5rem;&#10;    font-size: 1rem;&#10;}&#10;&#10;.form button {&#10;    padding: 0.5rem;&#10;    font-weight: bold;&#10;    background: #4caf50;&#10;    color: white;&#10;    border: none;&#10;    border-radius: 5px;&#10;}&#10;&#10;.error {&#10;    color: red;&#10;    font-size: 0.9rem;&#10;}&#10;" />
              <option name="updatedContent" value=".form {&#10;    width: 340px;&#10;    margin: 100px auto;&#10;    padding: 2.5rem 2rem;&#10;    border: 1px solid #e0e0e0;&#10;    border-radius: 14px;&#10;    background: #fff;&#10;    box-shadow: 0 4px 24px 0 rgba(0,0,0,0.06);&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 1.3rem;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#10;}&#10;&#10;.form h2 {&#10;    margin-bottom: 0.5rem;&#10;    font-size: 1.5rem;&#10;    font-weight: 500;&#10;    color: #222;&#10;    text-align: center;&#10;}&#10;&#10;.form input {&#10;    padding: 0.7rem 1rem;&#10;    font-size: 1rem;&#10;    border: 1px solid #e0e0e0;&#10;    border-radius: 7px;&#10;    background: #fafbfc;&#10;    transition: border 0.2s;&#10;}&#10;&#10;.form input:focus {&#10;    outline: none;&#10;    border: 1.5px solid #bdbdbd;&#10;    background: #fff;&#10;}&#10;&#10;.form button {&#10;    padding: 0.7rem 1rem;&#10;    font-weight: 500;&#10;    background: #222;&#10;    color: #fff;&#10;    border: none;&#10;    border-radius: 7px;&#10;    font-size: 1rem;&#10;    cursor: pointer;&#10;    transition: background 0.2s, box-shadow 0.2s;&#10;    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.04);&#10;}&#10;&#10;.form button:hover {&#10;    background: #444;&#10;}&#10;&#10;.error {&#10;    color: #d32f2f;&#10;    font-size: 0.95rem;&#10;    text-align: center;&#10;    margin-bottom: -0.5rem;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/LoginForm/LoginForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/LoginForm/LoginForm.tsx" />
              <option name="originalContent" value="import {useState} from 'react';&#10;import styles from './LoginForm.module.css';&#10;import {login} from '../../services/authService';&#10;import {useAuthStore} from &quot;../../context/authStore.ts&quot;;&#10;&#10;export default function LoginForm() {&#10;    const setAuth = useAuthStore((state) =&gt; state.setAuth);&#10;&#10;    const [email, setEmail] = useState('');&#10;    const [password, setPassword] = useState('');&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        try {&#10;            const data = await login(email, password);&#10;            setAuth(data.access_token, data.alias);&#10;            window.location.href = '/dashboard';&#10;        } catch (err: any) {&#10;            setError(err.message);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;form className={styles.form} onSubmit={handleSubmit}&gt;&#10;            &lt;h2&gt;Iniciar Sesión&lt;/h2&gt;&#10;            {error &amp;&amp; &lt;p className={styles.error}&gt;{error}&lt;/p&gt;}&#10;            &lt;input&#10;                type=&quot;email&quot;&#10;                placeholder=&quot;Correo electrónico&quot;&#10;                value={email}&#10;                onChange={(e) =&gt; setEmail(e.target.value)}&#10;                required&#10;            /&gt;&#10;            &lt;input&#10;                type=&quot;password&quot;&#10;                placeholder=&quot;Contraseña&quot;&#10;                value={password}&#10;                onChange={(e) =&gt; setPassword(e.target.value)}&#10;                required&#10;            /&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Ingresar&lt;/button&gt;&#10;        &lt;/form&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import {useState} from 'react';&#10;import styles from './LoginForm.module.css';&#10;import {login as loginService} from '../../services/authService';&#10;import {useAuthStore} from &quot;../../context/authStore.ts&quot;;&#10;&#10;export default function LoginForm() {&#10;    const login = useAuthStore((state) =&gt; state.login);&#10;&#10;    const [email, setEmail] = useState('');&#10;    const [password, setPassword] = useState('');&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        try {&#10;            const data = await loginService(email, password);&#10;            login(data.access_token, data.alias);&#10;            window.location.href = '/dashboard';&#10;        } catch (err: any) {&#10;            setError(err.message);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;form className={styles.form} onSubmit={handleSubmit}&gt;&#10;            &lt;h2&gt;Iniciar Sesión&lt;/h2&gt;&#10;            {error &amp;&amp; &lt;p className={styles.error}&gt;{error}&lt;/p&gt;}&#10;            &lt;input&#10;                type=&quot;email&quot;&#10;                placeholder=&quot;Correo electrónico&quot;&#10;                value={email}&#10;                onChange={(e) =&gt; setEmail(e.target.value)}&#10;                required&#10;            /&gt;&#10;            &lt;input&#10;                type=&quot;password&quot;&#10;                placeholder=&quot;Contraseña&quot;&#10;                value={password}&#10;                onChange={(e) =&gt; setPassword(e.target.value)}&#10;                required&#10;            /&gt;&#10;            &lt;button type=&quot;submit&quot;&gt;Ingresar&lt;/button&gt;&#10;        &lt;/form&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Navbar/Navbar.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Navbar/Navbar.module.css" />
              <option name="originalContent" value=".navbar {&#10;    width: 100%;&#10;    background: #fff;&#10;    color: #222;&#10;    padding: 1.2rem 2rem;&#10;    text-align: center;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.04);&#10;    border-bottom: 1px solid #ececec;&#10;    letter-spacing: 0.5px;&#10;}" />
              <option name="updatedContent" value=".navbar {&#10;    width: 100%;&#10;    background: #fff;&#10;    color: #222;&#10;    padding: 1.2rem 2rem;&#10;    text-align: center;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#10;    font-size: 1.2rem;&#10;    font-weight: 500;&#10;    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.04);&#10;    border-bottom: 1px solid #ececec;&#10;    letter-spacing: 0.5px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: space-between;&#10;}&#10;&#10;.navbarContent {&#10;    max-width: 1100px;&#10;    margin: 0 auto;&#10;    width: 100%;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: space-between;&#10;}&#10;&#10;.logoutBtn {&#10;    padding: 0.5rem 1.2rem;&#10;    border: none;&#10;    border-radius: 7px;&#10;    background: #222;&#10;    color: #fff;&#10;    font-size: 1rem;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    transition: background 0.2s;&#10;}&#10;&#10;.logoutBtn:hover {&#10;    background: #444;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Navbar/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Navbar/Navbar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import styles from './Navbar.module.css';&#10;&#10;const Navbar: React.FC = () =&gt; {&#10;    return (&#10;        &lt;header className={styles.navbar}&gt;&#10;            &lt;h1&gt;Red Social&lt;/h1&gt;&#10;        &lt;/header&gt;&#10;    );&#10;};&#10;&#10;export default Navbar;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import { useAuthStore } from '../../context/useAuthStore';&#10;import { useNavigate } from 'react-router-dom';&#10;import styles from './Navbar.module.css';&#10;&#10;const Navbar: React.FC = () =&gt; {&#10;    const logout = useAuthStore((state) =&gt; state.logout);&#10;    const navigate = useNavigate();&#10;&#10;    const handleLogout = () =&gt; {&#10;        logout();&#10;        navigate('/login');&#10;    };&#10;&#10;    return (&#10;        &lt;header className={styles.navbar}&gt;&#10;            &lt;div className={styles.navbarContent}&gt;&#10;                &lt;h1&gt;Red Social&lt;/h1&gt;&#10;                &lt;button onClick={handleLogout} className={styles.logoutBtn}&gt;&#10;                    Cerrar sesión&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/header&gt;&#10;    );&#10;};&#10;&#10;export default Navbar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Postcard/PostCard.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Postcard/PostCard.module.css" />
              <option name="originalContent" value=".card {&#10;    border: 1px solid #ddd;&#10;    margin-bottom: 1rem;&#10;    padding: 1rem;&#10;    border-radius: 5px;&#10;}&#10;&#10;.card button {&#10;    margin-top: 0.5rem;&#10;}&#10;" />
              <option name="updatedContent" value=".card {&#13;&#10;    border: 1px solid #ececec;&#13;&#10;    margin-bottom: 1.5rem;&#13;&#10;    padding: 1.5rem 1.2rem;&#13;&#10;    border-radius: 12px;&#13;&#10;    background: #fff;&#13;&#10;    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.04);&#13;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#13;&#10;    transition: box-shadow 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.card:hover {&#13;&#10;    box-shadow: 0 4px 24px 0 rgba(0,0,0,0.08);&#13;&#10;}&#13;&#10;&#13;&#10;.card button {&#13;&#10;    margin-top: 0.7rem;&#13;&#10;    padding: 0.6rem 1.1rem;&#13;&#10;    border: none;&#13;&#10;    border-radius: 7px;&#13;&#10;    background: #222;&#13;&#10;    color: #fff;&#13;&#10;    font-size: 1rem;&#13;&#10;    font-weight: 500;&#13;&#10;    cursor: pointer;&#13;&#10;    transition: background 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.card button:hover {&#13;&#10;    background: #444;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Sidebar/Sidebar.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Sidebar/Sidebar.module.css" />
              <option name="originalContent" value=".sidebar {&#10;    width: 200px;&#10;    background-color: #f1f1f1;&#10;    padding: 1rem;&#10;    height: 100vh;&#10;    display: flex;&#10;    flex-direction: column;&#10;}&#10;.sidebar button {&#10;    margin-bottom: 1rem;&#10;}&#10;" />
              <option name="updatedContent" value=".sidebar {&#13;&#10;    width: 220px;&#13;&#10;    background: #fafbfc;&#13;&#10;    padding: 2rem 1.2rem;&#13;&#10;    height: 100vh;&#13;&#10;    display: flex;&#13;&#10;    flex-direction: column;&#13;&#10;    border-right: 1px solid #ececec;&#13;&#10;    box-shadow: 2px 0 12px 0 rgba(0,0,0,0.03);&#13;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#13;&#10;    gap: 1.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebar button {&#13;&#10;    margin-bottom: 0.7rem;&#13;&#10;    padding: 0.7rem 1rem;&#13;&#10;    border: none;&#13;&#10;    border-radius: 7px;&#13;&#10;    background: #222;&#13;&#10;    color: #fff;&#13;&#10;    font-size: 1rem;&#13;&#10;    font-weight: 500;&#13;&#10;    cursor: pointer;&#13;&#10;    transition: background 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebar button:hover {&#13;&#10;    background: #444;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/Sidebar/Sidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/Sidebar/Sidebar.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import styles from './Sidebar.module.css';&#10;&#10;type Props = {&#10;    onNavigate: (page: &quot;posts&quot; | &quot;profile&quot;) =&gt; void;&#10;};&#10;&#10;const Sidebar: React.FC&lt;Props&gt; = ({ onNavigate }) =&gt; {&#10;    return (&#10;        &lt;aside className={styles.sidebar}&gt;&#10;            &lt;button onClick={() =&gt; onNavigate('profile')}&gt;Perfil&lt;/button&gt;&#10;            &lt;button onClick={() =&gt; onNavigate('posts')}&gt;Publicaciones&lt;/button&gt;&#10;        &lt;/aside&gt;&#10;    );&#10;};&#10;&#10;export default Sidebar;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#13;&#10;import styles from './Sidebar.module.css';&#13;&#10;&#13;&#10;type Props = {&#13;&#10;    onNavigate: (page: &quot;posts&quot; | &quot;profile&quot; | &quot;newpost&quot;) =&gt; void;&#13;&#10;};&#13;&#10;&#13;&#10;const Sidebar: React.FC&lt;Props&gt; = ({ onNavigate }) =&gt; {&#13;&#10;    return (&#13;&#10;        &lt;aside className={styles.sidebar}&gt;&#13;&#10;            &lt;button onClick={() =&gt; onNavigate('profile')}&gt;Perfil&lt;/button&gt;&#13;&#10;            &lt;button onClick={() =&gt; onNavigate('posts')}&gt;Publicaciones&lt;/button&gt;&#13;&#10;            &lt;button onClick={() =&gt; onNavigate('newpost')}&gt;Nueva publicación&lt;/button&gt;&#13;&#10;        &lt;/aside&gt;&#13;&#10;    );&#13;&#10;};&#13;&#10;&#13;&#10;export default Sidebar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/components/UserProfile/UserProfile.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/components/UserProfile/UserProfile.module.css" />
              <option name="originalContent" value=".profileContainer {&#10;    background-color: #ffffff;&#10;    padding: 1.5rem;&#10;    border-radius: 8px;&#10;    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.1);&#10;}" />
              <option name="updatedContent" value=".profileContainer {&#13;&#10;    background: #fff;&#13;&#10;    padding: 2rem 1.5rem;&#13;&#10;    border-radius: 14px;&#13;&#10;    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.04);&#13;&#10;    font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;&#13;&#10;    max-width: 400px;&#13;&#10;    margin: 2rem auto;&#13;&#10;    border: 1px solid #ececec;&#13;&#10;    display: flex;&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: center;&#13;&#10;    gap: 1.2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.profileContainer h2 {&#13;&#10;    font-size: 1.3rem;&#13;&#10;    font-weight: 500;&#13;&#10;    color: #222;&#13;&#10;    margin-bottom: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.profileContainer p {&#13;&#10;    color: #444;&#13;&#10;    font-size: 1rem;&#13;&#10;    margin: 0;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/context/useAuthStore.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/context/useAuthStore.ts" />
              <option name="originalContent" value="import {create} from 'zustand'&#10;&#10;type AuthStore = {&#10;    token: string | null&#10;    user: any&#10;    login: (token: string, user: any) =&gt; void&#10;    logout: () =&gt; void&#10;}&#10;&#10;export const useAuthStore = create&lt;AuthStore&gt;((set) =&gt; ({&#10;    token: null,&#10;    user: null,&#10;    login: (token, user) =&gt; set({token, user}),&#10;    logout: () =&gt; set({token: null, user: null}),&#10;}))&#10;" />
              <option name="updatedContent" value="import {create} from 'zustand'&#13;&#10;&#13;&#10;type AuthStore = {&#13;&#10;    token: string | null&#13;&#10;    user: any&#13;&#10;    login: (token: string, user: any) =&gt; void&#13;&#10;    logout: () =&gt; void&#13;&#10;}&#13;&#10;&#13;&#10;export const useAuthStore = create&lt;AuthStore&gt;((set) =&gt; ({&#13;&#10;    token: null,&#13;&#10;    user: null,&#13;&#10;    login: (token, user) =&gt; set({token, user}),&#13;&#10;    logout: () =&gt; {&#13;&#10;        localStorage.removeItem('token');&#13;&#10;        set({token: null, user: null});&#13;&#10;    },&#13;&#10;}))" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Dashboard.tsx" />
              <option name="originalContent" value="import React, {useEffect, useState} from 'react';&#10;import axios from 'axios';&#10;import styles from './Dashboard.module.css';&#10;import Navbar from '../components/Navbar/Navbar';&#10;import PostCard from '../components/Postcard/PostCard';&#10;import Sidebar from &quot;../components/Sidebar/Sidebar.tsx&quot;;&#10;import UserProfile from '../components/UserProfile/UserProfile.tsx';&#10;&#10;const Dashboard: React.FC = () =&gt; {&#10;    const [posts, setPosts] = useState([]);&#10;    const [view, setView] = useState&lt;'posts' | 'profile'&gt;('posts');&#10;&#10;    const token = localStorage.getItem('token') || '';&#10;&#10;    useEffect(() =&gt; {&#10;        if (view === 'posts') {&#10;            axios&#10;                .get('http://localhost:3003/posts', {&#10;                    headers: {Authorization: `Bearer ${token}`},&#10;                })&#10;                .then((res) =&gt; setPosts(res.data))&#10;                .catch((err) =&gt; console.error(err));&#10;        }&#10;    }, [view]);&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;Navbar/&gt;&#10;            &lt;div className={styles.container}&gt;&#10;                &lt;Sidebar onNavigate={setView}/&gt;&#10;                &lt;main className={styles.main}&gt;&#10;                    {view === 'posts' ? (&#10;                        posts.map((post: any) =&gt; (&#10;                            &lt;PostCard key={post.id} post={post} token={token}/&gt;&#10;                        ))&#10;                    ) : (&#10;                        &lt;UserProfile token={token}/&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default Dashboard;&#10;" />
              <option name="updatedContent" value="import React, {useEffect, useState} from 'react';&#10;import axios from 'axios';&#10;import styles from './Dashboard.module.css';&#10;import Navbar from '../components/Navbar/Navbar';&#10;import PostCard from '../components/Postcard/PostCard';&#10;import Sidebar from &quot;../components/Sidebar/Sidebar.tsx&quot;;&#10;import UserProfile from '../components/UserProfile/UserProfile.tsx';&#10;&#10;const Dashboard: React.FC = () =&gt; {&#10;    const [posts, setPosts] = useState([]);&#10;    const [view, setView] = useState&lt;'posts' | 'profile' | 'newpost'&gt;('posts');&#10;    const [mensaje, setMensaje] = useState('');&#10;    const [loading, setLoading] = useState(false);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;    const [success, setSuccess] = useState(false);&#10;&#10;    const token = localStorage.getItem('token') || '';&#10;&#10;    useEffect(() =&gt; {&#10;        if (view === 'posts') {&#10;            axios&#10;                .get('http://localhost:3003/posts', {&#10;                    headers: {Authorization: `Bearer ${token}`},&#10;                })&#10;                .then((res) =&gt; setPosts(res.data))&#10;                .catch((err) =&gt; console.error(err));&#10;        }&#10;    }, [view]);&#10;&#10;    const handleCreatePost = async (e: React.FormEvent) =&gt; {&#10;        e.preventDefault();&#10;        setLoading(true);&#10;        setError(null);&#10;        setSuccess(false);&#10;        try {&#10;            // Importación dinámica para evitar hook en render&#10;            const { createPost } = await import('../services/postService');&#10;            await createPost(mensaje);&#10;            setMensaje('');&#10;            setSuccess(true);&#10;            setView('posts');&#10;        } catch (err: any) {&#10;            setError(err.message || 'Error al crear la publicación');&#10;        } finally {&#10;            setLoading(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;div&gt;&#10;            &lt;Navbar/&gt;&#10;            &lt;div className={styles.container}&gt;&#10;                &lt;Sidebar onNavigate={setView}/&gt;&#10;                &lt;main className={styles.main}&gt;&#10;                    {view === 'posts' ? (&#10;                        posts.map((post: any) =&gt; (&#10;                            &lt;PostCard key={post.id} post={post} token={token}/&gt;&#10;                        ))&#10;                    ) : view === 'profile' ? (&#10;                        &lt;UserProfile token={token}/&gt;&#10;                    ) : (&#10;                        &lt;form onSubmit={handleCreatePost} style={{maxWidth: 500, margin: '2rem auto', display: 'flex', flexDirection: 'column', gap: '1.2rem', background: '#fff', padding: '2rem', borderRadius: 12, boxShadow: '0 2px 12px 0 rgba(0,0,0,0.04)', fontFamily: `'Segoe UI', 'Roboto', Arial, sans-serif`}}&gt;&#10;                            &lt;h2 style={{textAlign: 'center', fontWeight: 500, color: '#222', fontFamily: 'inherit'}}&gt;Nueva publicación&lt;/h2&gt;&#10;                            &lt;textarea&#10;                                value={mensaje}&#10;                                onChange={e =&gt; setMensaje(e.target.value)}&#10;                                placeholder=&quot;¿Qué estás pensando?&quot;&#10;                                required&#10;                                rows={4}&#10;                                style={{resize: 'none', padding: '1rem', borderRadius: 7, border: '1px solid #e0e0e0', fontSize: '1rem', fontFamily: 'inherit'}}&#10;                            /&gt;&#10;                            {error &amp;&amp; &lt;div style={{color: '#d32f2f', textAlign: 'center', fontFamily: 'inherit'}}&gt;{error}&lt;/div&gt;}&#10;                            {success &amp;&amp; &lt;div style={{color: '#388e3c', textAlign: 'center', fontFamily: 'inherit'}}&gt;¡Publicación creada!&lt;/div&gt;}&#10;                            &lt;button type=&quot;submit&quot; disabled={loading} style={{padding: '0.7rem 1rem', borderRadius: 7, border: 'none', background: '#222', color: '#fff', fontWeight: 500, fontSize: '1rem', cursor: 'pointer', transition: 'background 0.2s', fontFamily: 'inherit'}}&gt;&#10;                                {loading ? 'Creando...' : 'Publicar'}&#10;                            &lt;/button&gt;&#10;                        &lt;/form&gt;&#10;                    )}&#10;                &lt;/main&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default Dashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/routes/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/routes/index.tsx" />
              <option name="originalContent" value="import {Route, Routes, Navigate} from 'react-router-dom'&#10;import LoginPage from '../pages/LoginPage'&#10;import {useAuthStore} from '../context/useAuthStore'&#10;import type { JSX } from 'react'&#10;&#10;const PrivateRoute = ({children}: { children: JSX.Element }) =&gt; {&#10;    const token = useAuthStore((state) =&gt; state.token)&#10;    return token ? children : &lt;Navigate to=&quot;/login&quot;/&gt;&#10;}&#10;&#10;export default function AppRoutes() {&#10;    return (&#10;        &lt;Routes&gt;&#10;            &lt;Route path=&quot;/login&quot; element={&lt;LoginPage/&gt;}/&gt;&#10;            &lt;Route path=&quot;*&quot; element={&lt;Navigate to=&quot;/login&quot;/&gt;}/&gt;&#10;        &lt;/Routes&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="import {Route, Routes, Navigate} from 'react-router-dom'&#10;import LoginPage from '../pages/LoginPage'&#10;&#10;export default function AppRoutes() {&#10;    return (&#10;        &lt;Routes&gt;&#10;            &lt;Route path=&quot;/login&quot; element={&lt;LoginPage/&gt;}/&gt;&#10;            &lt;Route path=&quot;*&quot; element={&lt;Navigate to=&quot;/login&quot;/&gt;}/&gt;&#10;        &lt;/Routes&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/services/authService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/services/authService.ts" />
              <option name="originalContent" value="export async function login(email: string, password: string) {&#10;    const response = await fetch('http://localhost:3001/auth/login', {&#10;        method: 'POST',&#10;        headers: {'Content-Type': 'application/json'},&#10;        body: JSON.stringify({email, password}),&#10;    });&#10;&#10;    if (!response.ok) {&#10;        const error = await response.json();&#10;        throw new Error(error.message || 'Login failed');&#10;    }&#10;&#10;    return response.json(); // { access_token, alias }&#10;}&#10;" />
              <option name="updatedContent" value="import { authApi } from '../api/apis';&#10;&#10;export async function login(email: string, password: string) {&#10;    const response = await authApi.post('/auth/login', { email, password });&#10;    return response.data; // { access_token, alias }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/services/postService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/services/postService.ts" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="import axios from 'axios';&#10;&#10;export async function createPost(mensaje: string) {&#10;  const token = localStorage.getItem('token');&#10;  const response = await axios.post(&#10;    'http://localhost:3003/posts',&#10;    { mensaje },&#10;    {&#10;      headers: {&#10;        Authorization: token ? `Bearer ${token}` : undefined,&#10;      },&#10;    }&#10;  );&#10;  return response.data;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/likes/likes.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/likes/likes.service.ts" />
              <option name="originalContent" value="import { Injectable, ConflictException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Like } from './like.entity';&#10;import { Repository } from 'typeorm';&#10;import { NotFoundException } from '@nestjs/common';&#10;&#10;@Injectable()&#10;export class LikesService {&#10;  constructor(&#10;    @InjectRepository(Like)&#10;    private likesRepository: Repository&lt;Like&gt;,&#10;  ) {}&#10;&#10;  async like(post_id: string, usuario_id: string): Promise&lt;Like&gt; {&#10;    const already = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (already) {&#10;      throw new ConflictException('Ya le diste like a esta publicación');&#10;    }&#10;&#10;    const like = this.likesRepository.create({ post_id, usuario_id });&#10;    return this.likesRepository.save(like);&#10;  }&#10;&#10;  async countByPost(post_id: string): Promise&lt;number&gt; {&#10;    return this.likesRepository.count({ where: { post_id } });&#10;  }&#10;&#10;  async removeLike(post_id: string, usuario_id: string): Promise&lt;void&gt; {&#10;    const like = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (!like) {&#10;      // Puedes lanzar una excepción o simplemente no hacer nada&#10;      throw new NotFoundException('Like no encontrado');&#10;    }&#10;&#10;    await this.likesRepository.remove(like);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable, ConflictException } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;import { Like } from './like.entity';&#10;import { Repository } from 'typeorm';&#10;import { NotFoundException } from '@nestjs/common';&#10;&#10;@Injectable()&#10;export class LikesService {&#10;  constructor(&#10;    @InjectRepository(Like)&#10;    private likesRepository: Repository&lt;Like&gt;,&#10;  ) {}&#10;&#10;  async like(post_id: string, usuario_id: string): Promise&lt;Like&gt; {&#10;    const already = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (already) {&#10;      throw new ConflictException('Ya le diste like a esta publicación');&#10;    }&#10;&#10;    const like = this.likesRepository.create({ post_id, usuario_id });&#10;    return this.likesRepository.save(like);&#10;  }&#10;&#10;  async countByPost(post_id: string): Promise&lt;number&gt; {&#10;    return this.likesRepository.count({ where: { post_id } });&#10;  }&#10;&#10;  async removeLike(post_id: string, usuario_id: string): Promise&lt;void&gt; {&#10;    const like = await this.likesRepository.findOne({&#10;      where: { post_id, usuario_id },&#10;    });&#10;&#10;    if (!like) {&#10;      // Puedes lanzar una excepción o simplemente no hacer nada&#10;      throw new NotFoundException('Like no encontrado');&#10;    }&#10;&#10;    await this.likesRepository.remove(like);&#10;  }&#10;&#10;  async findByPost(post_id: string): Promise&lt;Like[]&gt; {&#10;    return this.likesRepository.find({ where: { post_id } });&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/main.ts" />
              <option name="originalContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;&#10;  // Configuración de Swagger&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Posts Service API')&#10;    .setDescription('Documentación de la API para el servicio de publicaciones')&#10;    .setVersion('1.0')&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(process.env.PORT ?? 3000);&#10;}&#10;&#10;bootstrap();&#10;" />
              <option name="updatedContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;&#10;  // Habilitar CORS&#10;  app.enableCors();&#10;&#10;  // Configuración de Swagger&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Posts Service API')&#10;    .setDescription('Documentación de la API para el servicio de publicaciones')&#10;    .setVersion('1.0')&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(process.env.PORT ?? 3000);&#10;}&#10;&#10;bootstrap();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/posts/posts.controller.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/posts/posts.controller.spec.ts" />
              <option name="originalContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { PostsController } from './posts.controller';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;&#10;describe('PostsController', () =&gt; {&#10;  let controller: PostsController;&#10;  let postsService: any;&#10;  let likesService: any;&#10;&#10;  beforeEach(async () =&gt; {&#10;    postsService = {&#10;      create: jest.fn(),&#10;      findAll: jest.fn(),&#10;    };&#10;    likesService = {&#10;      like: jest.fn(),&#10;      removeLike: jest.fn(),&#10;    };&#10;    const module: TestingModule = await Test.createTestingModule({&#10;      controllers: [PostsController],&#10;      providers: [&#10;        { provide: PostsService, useValue: postsService },&#10;        { provide: LikesService, useValue: likesService },&#10;      ],&#10;    }).compile();&#10;    controller = module.get&lt;PostsController&gt;(PostsController);&#10;  });&#10;&#10;  it('should be defined', () =&gt; {&#10;    expect(controller).toBeDefined();&#10;  });&#10;&#10;  describe('create', () =&gt; {&#10;    it('debería crear un post', async () =&gt; {&#10;      const dto: CreatePostDto = { mensaje: 'Hola' };&#10;      const req = { user: { userId: 'user1' } };&#10;      postsService.create.mockResolvedValue({&#10;        id: 1,&#10;        ...dto,&#10;        usuario_id: 'user1',&#10;      });&#10;      const result = await controller.create(dto, req);&#10;      expect(result).toEqual({ id: 1, ...dto, usuario_id: 'user1' });&#10;      expect(postsService.create).toHaveBeenCalledWith(dto, 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getAll', () =&gt; {&#10;    it('debería retornar todos los posts', async () =&gt; {&#10;      const posts = [{ id: 1 }, { id: 2 }];&#10;      postsService.findAll.mockResolvedValue(posts);&#10;      const result = await controller.getAll();&#10;      expect(result).toBe(posts);&#10;    });&#10;  });&#10;&#10;  describe('like', () =&gt; {&#10;    it('debería dar like a un post', async () =&gt; {&#10;      likesService.like.mockResolvedValue({&#10;        id: 1,&#10;        post_id: '1',&#10;        usuario_id: 'user1',&#10;      });&#10;      const req = { user: { userId: 'user1' } };&#10;      const result = await controller.like('1', req);&#10;      expect(result).toEqual({ id: 1, post_id: '1', usuario_id: 'user1' });&#10;      expect(likesService.like).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('removeLike', () =&gt; {&#10;    it('debería quitar el like de un post', async () =&gt; {&#10;      likesService.removeLike.mockResolvedValue(undefined);&#10;      const req = { user: { userId: 'user1' } };&#10;      await controller.removeLike('1', req);&#10;      expect(likesService.removeLike).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { Test, TestingModule } from '@nestjs/testing';&#10;import { PostsController } from './posts.controller';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;&#10;describe('PostsController', () =&gt; {&#10;  let controller: PostsController;&#10;  let postsService: any;&#10;  let likesService: any;&#10;&#10;  beforeEach(async () =&gt; {&#10;    postsService = {&#10;      create: jest.fn(),&#10;      findAll: jest.fn(),&#10;    };&#10;    likesService = {&#10;      like: jest.fn(),&#10;      removeLike: jest.fn(),&#10;    };&#10;    const module: TestingModule = await Test.createTestingModule({&#10;      controllers: [PostsController],&#10;      providers: [&#10;        { provide: PostsService, useValue: postsService },&#10;        { provide: LikesService, useValue: likesService },&#10;      ],&#10;    }).compile();&#10;    controller = module.get&lt;PostsController&gt;(PostsController);&#10;  });&#10;&#10;  it('should be defined', () =&gt; {&#10;    expect(controller).toBeDefined();&#10;  });&#10;&#10;  describe('create', () =&gt; {&#10;    it('debería crear un post', async () =&gt; {&#10;      const dto: CreatePostDto = { mensaje: 'Hola' };&#10;      const req = { user: { userId: 'user1' } };&#10;      postsService.create.mockResolvedValue({&#10;        id: 1,&#10;        ...dto,&#10;        usuario_id: 'user1',&#10;      });&#10;      const result = await controller.create(dto, req);&#10;      expect(result).toEqual({ id: 1, ...dto, usuario_id: 'user1' });&#10;      expect(postsService.create).toHaveBeenCalledWith(dto, 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getAll', () =&gt; {&#10;    it('debería retornar todos los posts', async () =&gt; {&#10;      const posts = [{ id: 1 }, { id: 2 }];&#10;      postsService.findAll.mockResolvedValue(posts);&#10;      const result = await controller.getAll();&#10;      expect(result).toBe(posts);&#10;    });&#10;  });&#10;&#10;  describe('like', () =&gt; {&#10;    it('debería dar like a un post', async () =&gt; {&#10;      likesService.like.mockResolvedValue({&#10;        id: 1,&#10;        post_id: '1',&#10;        usuario_id: 'user1',&#10;      });&#10;      const req = { user: { userId: 'user1' } };&#10;      const result = await controller.like('1', req);&#10;      expect(result).toEqual({ id: 1, post_id: '1', usuario_id: 'user1' });&#10;      expect(likesService.like).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('removeLike', () =&gt; {&#10;    it('debería quitar el like de un post', async () =&gt; {&#10;      likesService.removeLike.mockResolvedValue(undefined);&#10;      const req = { user: { userId: 'user1' } };&#10;      await controller.removeLike('1', req);&#10;      expect(likesService.removeLike).toHaveBeenCalledWith('1', 'user1');&#10;    });&#10;  });&#10;&#10;  describe('getLikesByPost', () =&gt; {&#10;    it('debería retornar los likes de un post', async () =&gt; {&#10;      const likes = [&#10;        { id: 1, post_id: '1', usuario_id: 'user1' },&#10;        { id: 2, post_id: '1', usuario_id: 'user2' },&#10;      ];&#10;      likesService.findByPost = jest.fn().mockResolvedValue(likes);&#10;      const result = await controller.getLikesByPost('1');&#10;      expect(result).toBe(likes);&#10;      expect(likesService.findByPost).toHaveBeenCalledWith('1');&#10;    });&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/posts-service/src/posts/posts.controller.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/posts-service/src/posts/posts.controller.ts" />
              <option name="originalContent" value="import {&#10;  Controller,&#10;  Get,&#10;  Post as HttpPost,&#10;  Body,&#10;  UseGuards,&#10;  Request,&#10;  Param,&#10;  Delete,&#10;} from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;import {&#10;  ApiTags,&#10;  ApiBearerAuth,&#10;  ApiOperation,&#10;  ApiResponse,&#10;  ApiParam,&#10;} from '@nestjs/swagger';&#10;&#10;@ApiTags('Posts')&#10;@ApiBearerAuth()&#10;@Controller('posts')&#10;export class PostsController {&#10;  constructor(&#10;    private postsService: PostsService,&#10;    private likesService: LikesService,&#10;  ) {}&#10;&#10;  @ApiOperation({ summary: 'Crear un nuevo post' })&#10;  @ApiResponse({ status: 201, description: 'Post creado exitosamente.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost()&#10;  create(@Body() dto: CreatePostDto, @Request() req) {&#10;    return this.postsService.create(dto, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Obtener todos los posts' })&#10;  @ApiResponse({ status: 200, description: 'Lista de posts.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get()&#10;  async getAll() {&#10;    return this.postsService.findAll();&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Dar like a un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 201, description: 'Like agregado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost(':id/like')&#10;  like(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.like(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Quitar like de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Like eliminado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Delete(':id/like')&#10;  removeLike(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.removeLike(id, req.user.userId);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import {&#10;  Controller,&#10;  Get,&#10;  Post as HttpPost,&#10;  Body,&#10;  UseGuards,&#10;  Request,&#10;  Param,&#10;  Delete,&#10;} from '@nestjs/common';&#10;import { AuthGuard } from '@nestjs/passport';&#10;import { PostsService } from './posts.service';&#10;import { LikesService } from '../likes/likes.service';&#10;import { CreatePostDto } from './dto/create-post.dto';&#10;import {&#10;  ApiTags,&#10;  ApiBearerAuth,&#10;  ApiOperation,&#10;  ApiResponse,&#10;  ApiParam,&#10;} from '@nestjs/swagger';&#10;&#10;@ApiTags('Posts')&#10;@ApiBearerAuth()&#10;@Controller('posts')&#10;export class PostsController {&#10;  constructor(&#10;    private postsService: PostsService,&#10;    private likesService: LikesService,&#10;  ) {}&#10;&#10;  @ApiOperation({ summary: 'Crear un nuevo post' })&#10;  @ApiResponse({ status: 201, description: 'Post creado exitosamente.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost()&#10;  create(@Body() dto: CreatePostDto, @Request() req) {&#10;    return this.postsService.create(dto, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Obtener todos los posts' })&#10;  @ApiResponse({ status: 200, description: 'Lista de posts.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get()&#10;  async getAll() {&#10;    return this.postsService.findAll();&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Dar like a un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 201, description: 'Like agregado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @HttpPost(':id/like')&#10;  like(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.like(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Quitar like de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Like eliminado.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Delete(':id/like')&#10;  removeLike(@Param('id') id: string, @Request() req) {&#10;    return this.likesService.removeLike(id, req.user.userId);&#10;  }&#10;&#10;  @ApiOperation({ summary: 'Listar likes de un post' })&#10;  @ApiParam({ name: 'id', description: 'ID del post' })&#10;  @ApiResponse({ status: 200, description: 'Lista de likes del post.' })&#10;  @UseGuards(AuthGuard('jwt'))&#10;  @Get(':id/likes')&#10;  async getLikesByPost(@Param('id') id: string) {&#10;    return this.likesService.findByPost(id);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/users-service/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/users-service/src/main.ts" />
              <option name="originalContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';&#10;import { GlobalExceptionFilter } from './global-exception.filter';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;  app.useGlobalFilters(new GlobalExceptionFilter());&#10;&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Social Network API')&#10;    .setDescription('Documentación de la API de usuarios y autenticación')&#10;    .setVersion('1.0')&#10;    .addBearerAuth()&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(process.env.PORT ?? 3000);&#10;}&#10;&#10;bootstrap();&#10;" />
              <option name="updatedContent" value="import { NestFactory } from '@nestjs/core';&#10;import { AppModule } from './app.module';&#10;import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';&#10;import { GlobalExceptionFilter } from './global-exception.filter';&#10;&#10;async function bootstrap() {&#10;  const app = await NestFactory.create(AppModule);&#10;  app.useGlobalFilters(new GlobalExceptionFilter());&#10;  app.enableCors();&#10;&#10;  const config = new DocumentBuilder()&#10;    .setTitle('Social Network API')&#10;    .setDescription('Documentación de la API de usuarios y autenticación')&#10;    .setVersion('1.0')&#10;    .addBearerAuth()&#10;    .build();&#10;  const document = SwaggerModule.createDocument(app, config);&#10;  SwaggerModule.setup('api', app, document);&#10;&#10;  await app.listen(process.env.PORT ?? 3000);&#10;}&#10;&#10;bootstrap();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>